<!DOCTYPE html>
<html>
<head>
  <title>üî• Hot or Not AI üî•</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Models & Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.2.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/pose-detection"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/pose"></script>
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>

  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
      background-size: 400% 400%;
      animation: gradientBG 15s ease infinite;
      color: white;
      text-align: center;
    }
    @keyframes gradientBG {
      0% {background-position: 0% 50%;}
      50% {background-position: 100% 50%;}
      100% {background-position: 0% 50%;}
    }
    h1 { margin-top: 30px; }
    button {
      padding: 15px 30px;
      background: rgba(255,255,255,0.1);
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 12px;
      color: white;
      backdrop-filter: blur(10px);
      cursor: pointer;
      font-size: 18px;
      transition: all 0.3s ease;
    }
    button:hover { background: rgba(255,255,255,0.2); transform: scale(1.05); }
    #resultCard {
      display: none;
      margin-top: 20px;
      padding: 20px;
      border-radius: 15px;
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(12px);
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
      position: relative;
    }
    .score { font-size: 26px; font-weight: bold; margin: 10px 0; }
    .glow { animation: glowPulse 1s infinite alternate; }
    @keyframes glowPulse {
      from { text-shadow: 0 0 5px #fff, 0 0 10px #ff4d6d; }
      to { text-shadow: 0 0 15px #fff, 0 0 25px #ff4d6d; }
    }
    .vibe, .type, .badge, .rank {
      font-size: 18px; margin-top: 10px; opacity: 0; transition: opacity 1s ease;
    }
    img { max-width: 100%; border-radius: 10px; margin-top: 15px; }
    .loader {
      display: none;
      border: 6px solid rgba(255,255,255,0.1);
      border-top: 6px solid #ff4d6d;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
    }
    @keyframes spin { 0% { transform: rotate(0deg);} 100% { transform: rotate(360deg);} }
    #modal {
      display: none;
      position: fixed;
      top:0; left:0; right:0; bottom:0;
      background: rgba(0,0,0,0.7);
      z-index: 9999;
      justify-content: center;
      align-items: center;
    }
    .modalContent {
      background: rgba(255,255,255,0.1);
      padding: 30px;
      border-radius: 20px;
      backdrop-filter: blur(15px);
      text-align: center;
    }
    .flash {
      animation: flashRainbow 0.5s ease;
    }
    @keyframes flashRainbow {
      0% { background: red; }
      20% { background: orange; }
      40% { background: yellow; }
      60% { background: green; }
      80% { background: blue; }
      100% { background: purple; }
    }
    .shake {
      animation: shakeAnim 0.4s ease;
    }
    @keyframes shakeAnim {
      0% { transform: translate(0,0); }
      25% { transform: translate(-5px, 5px); }
      50% { transform: translate(5px, -5px); }
      75% { transform: translate(-5px, -5px); }
      100% { transform: translate(0,0); }
    }
  </style>
</head>
<body>

<h1>üî• Hot or Not AI üî•</h1>
<button id="rateMeBtn">RATE ME</button>

<div id="resultCard">
  <img id="preview">
  <div class="score" id="faceScore">Face Score: 0.0/10</div>
  <div class="score" id="bodyScore">Body Score: 0.0/10</div>
  <div class="vibe" id="vibeText"></div>
  <div class="type" id="typeText"></div>
  <div class="badge" id="badgeText"></div>
  <div class="rank" id="rankText"></div>
  <button id="shareBtn">üì§ Share My Result</button>
</div>

<div class="loader" id="loader"></div>

<input type="file" id="fileInput" accept="image/*" style="display:none;">

<div id="modal">
  <div class="modalContent">
    <h2>üì∏ Choose Your Photo</h2>
    <button onclick="document.getElementById('fileInput').click()">Upload from Device</button>
    <br><br>
    <button onclick="openCamera()">Take Photo</button>
    <br><br>
    <button onclick="closeModal()">Cancel</button>
  </div>
</div>

<script>
let faceModel, bodyModel, detector;

const vibes = ["Confident Charmer üòé","Playful Energy üòú","Mysterious Allure üñ§","Romantic Dreamer üíñ","Adventurous Spirit üåç","Life of the Party üéâ"];
const roastTypes = [
  "People who treat red flags as decorative lights üö©",
  "Girls who would date a SoundCloud rapper *on purpose* üé§",
  "Guys who think foreplay is playing Xbox before bed üéÆ",
  "People who ghost but still watch your stories üëª",
  "Women who have 4 exes and they‚Äôre all DJs üéß",
  "Men who post gym selfies with captions about 'the grind' üí™",
  "People who take personality tests to decide who to dump üß†üíî",
  "Those who have an Amazon cart full of chaos üõí",
  "People who think AirPods are a personality trait üéß",
  "Hot introverts who think eye contact is a marriage proposal üëÄ"
];
const badges = ["Certified Heartbreaker üíî","Main Character Energy üé¨","Dangerously Hot üî•","Chaos in Human Form üå™Ô∏è","Too Hot to Handle üö´üî•"];
function randomRank(){ return `Top ${Math.floor(Math.random()*50)+1}% of uploads today`; }

async function loadModels() {
  document.getElementById("loader").style.display = "block";
  await faceapi.nets.ssdMobilenetv1.loadFromUri('https://cdn.jsdelivr.net/gh/justadudewhohacks/face-api.js/models');
  faceModel = await tf.loadLayersModel('https://huggingface.co/datasets/ayasy/face_beauty_tfjs/resolve/main/model.json');
  bodyModel = faceModel;
  detector = await poseDetection.createDetector(poseDetection.SupportedModels.BlazePose, { runtime: 'tfjs', modelType: 'full' });
  document.getElementById("loader").style.display = "none";
}
function openModal(){ document.getElementById('modal').style.display = 'flex'; }
function closeModal(){ document.getElementById('modal').style.display = 'none'; }

function openCamera() {
  closeModal();
  navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {
    const video = document.createElement('video');
    video.autoplay = true; video.srcObject = stream;
    document.body.appendChild(video);
    const snapBtn = document.createElement('button');
    snapBtn.innerText = "Capture";
    snapBtn.onclick = () => {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth; canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getTracks().forEach(t => t.stop());
      video.remove(); snapBtn.remove();
      const img = new Image();
      img.src = canvas.toDataURL();
      img.onload = () => processImage(img);
    };
    document.body.appendChild(snapBtn);
  });
}

async function detectPeople(img) {
  const faces = await faceapi.detectAllFaces(img);
  let detections = faces.map(f => ({ type: 'face', box: f.box }));
  const bodies = await detector.estimatePoses(img);
  bodies.forEach(b => {
    if (b.keypoints?.length) {
      const xs = b.keypoints.map(k => k.x), ys = b.keypoints.map(k => k.y);
      detections.push({ type: 'body', box: { x: Math.min(...xs), y: Math.min(...ys), width: Math.max(...xs)-Math.min(...xs), height: Math.max(...ys)-Math.min(...ys) } });
    }
  });
  return detections;
}
async function predictScore(canvas, model) {
  const t = tf.browser.fromPixels(canvas).resizeBilinear([224,224]).toFloat().div(tf.scalar(255)).expandDims(0);
  const p = model.predict(t), s = await p.data();
  t.dispose(); p.dispose();
  return Math.max(1, Math.min(10, s[0])).toFixed(1);
}
function animateScore(elId, finalScore, cb) {
  let current = 0.0, step = finalScore/40;
  const el = document.getElementById(elId);
  const interval = setInterval(() => {
    current += step;
    if(current >= finalScore){
      current = finalScore; clearInterval(interval);
      el.classList.add("glow");
      document.body.classList.add("flash");
      setTimeout(()=>document.body.classList.remove("flash"),500);
      document.getElementById('resultCard').classList.add("shake");
      setTimeout(()=>document.getElementById('resultCard').classList.remove("shake"),400);
      if(cb) cb();
    }
    el.innerText = `${elId==='faceScore'?'Face':'Body'} Score: ${current.toFixed(1)}/10`;
  },50);
}
async function processImage(img) {
  document.getElementById("loader").style.display = "block";
  const detections = await detectPeople(img);
  let faceScore = "-", bodyScore = "-";
  for (let det of detections) {
    const { type, box } = det, pad=0.2;
    const crop=document.createElement('canvas'); crop.width=400; crop.height=400;
    crop.getContext('2d').drawImage(img, box.x-box.width*pad, box.y-box.height*pad, box.width*(1+pad*2), box.height*(1+pad*2), 0, 0, 400, 400);
    if (type === 'face') faceScore = await predictScore(crop, faceModel);
    if (type === 'body') bodyScore = await predictScore(crop, bodyModel);
  }
  document.getElementById("preview").src = img.src;
  document.getElementById("resultCard").style.display = "block";
  document.getElementById("loader").style.display = "none";
  animateScore('faceScore', parseFloat(faceScore), () => {
    animateScore('bodyScore', parseFloat(bodyScore), () => {
      document.getElementById("vibeText").innerText = `Vibe: ${vibes[Math.floor(Math.random()*vibes.length)]}`;
      document.getElementById("typeText").innerText = `Type: ${roastTypes[Math.floor(Math.random()*roastTypes.length)]}`;
      document.getElementById("badgeText").innerText = `üèÜ ${badges[Math.floor(Math.random()*badges.length)]}`;
      document.getElementById("rankText").innerText = randomRank();
      document.querySelectorAll(".vibe,.type,.badge,.rank").forEach(e=>e.style.opacity=1);
      confetti();
    });
  });
}
document.getElementById('shareBtn').addEventListener('click', async () => {
  if (navigator.share) await navigator.share({ title: 'Hot or Not AI', text: 'Check my AI score!', url: window.location.href });
});
document.getElementById('rateMeBtn').addEventListener('click', openModal);
document.getElementById('fileInput').addEventListener('change', async e => {
  closeModal();
  const file = e.target.files[0];
  if (!file) return;
  const img = await faceapi.bufferToImage(file);
  processImage(img);
});
loadModels();
</script>
</body>
</html>
